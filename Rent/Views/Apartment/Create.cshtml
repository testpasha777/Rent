@model BLL.ViewModel.ApartmentCreateViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create advertisement</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" id="createApartmentForm">
        <div class="form-group">
            @Html.LabelFor(model => model.TypeOfHousingId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @for (var i = 0; i < Model.TypeOfHousing.Count(); i++)
                {
                    @Html.HiddenFor(y => y.TypeOfHousing[i].Id)
                    @Html.HiddenFor(y => y.TypeOfHousing[i].Name)
                }

                @Html.DropDownListFor(model => model.TypeOfHousingId, Model
                                                     .TypeOfHousing
                                                     .Select(c => new SelectListItem
                                                     {
                                                         Value = c.Id.ToString(),
                                                         Text = c.Name
                                                     }), htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TypeOfHousingId, "", new { @class = "text-danger" })
            </div>
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            @Html.LabelFor(model => model.AvailableToGuestId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @for (var i = 0; i < Model.AvailableToGuest.Count(); i++)
                {
                    @Html.HiddenFor(y => y.AvailableToGuest[i].Id)
                    @Html.HiddenFor(y => y.AvailableToGuest[i].Name)
                }

                @Html.DropDownListFor(model => model.AvailableToGuestId, Model
                                                     .AvailableToGuest
                                                     .Select(c => new SelectListItem
                                                     {
                                                         Value = c.Id.ToString(),
                                                         Text = c.Name
                                                     }), htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.AvailableToGuestId, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.MaxNumberOfGuests, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.MaxNumberOfGuests, new { htmlAttributes = new { @min = 1, @max = 16, @Value = 2, @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MaxNumberOfGuests, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <h2>Address</h2>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, htmlAttributes: new { @class = "form-control description-form"})
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger"})
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" }})
            </div>
            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger"})
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SelectedApartmentComfortsId, htmlAttributes: new { @class = "control-label col-md-2"})
            <div class="col-md-10">
                @for (var i = 0; i < Model.ApartmentComforts.Count(); i++)
                {
                    @Html.HiddenFor(y => y.ApartmentComforts[i].Id)
                    @Html.HiddenFor(y => y.ApartmentComforts[i].Name)
                }

                @Html.ListBoxFor(model => model.SelectedApartmentComfortsId, Model.ApartmentComforts
                                                  .Select(c => new SelectListItem  {
                                                  Value = c.Id.ToString(),
                                                  Text = c.Name
                                                  }),   new { @class = "chosen-select" })
            </div>
           @Html.ValidationMessageFor(model => model.SelectedApartmentComfortsId, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.images, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.images, htmlAttributes: new { type = "file", multiple = true, @class = "form-control", @id = "addImg" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section styles {
    <link href="~/Content/bootstrap-chosen.css" rel="stylesheet" />
}

@section scripts { 
    <script src="~/Scripts/chosen.jquery.js"></script>
    <script>
        $('.chosen-select').chosen();
        $('chosen-select-deselect').chosen({ allow_single_deselect: true });

        function readURL(input) {

            if (input.files && input.files[0]) {
                var reader = new FileReader();
                
                reader.onload = function (e) {
                    var img = document.createElement("img");
                    var input = document.createElement("textarea");

                    img.height = 200;
                    img.src = e.target.result;
                    form.appendChild(img);

                    input.name = "images";
                    input.style = "display: none";
                    input.textContent = e.target.result;
                    
                    form.appendChild(input);
                }
                
                reader.readAsDataURL(input.files[0]);
            }
        }

        var form = document.getElementById("createApartmentForm");

        document.getElementById("addImg").addEventListener("change", function () {
            readURL(this);
        });
    </script>
}

