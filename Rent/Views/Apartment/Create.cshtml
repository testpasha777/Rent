@model BLL.ViewModel.ApartmentCreateViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create advertisement</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" id="createApartmentForm">
        <div class="form-group">
            @Html.LabelFor(model => model.TypeOfHousingId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @for (var i = 0; i < Model.TypeOfHousing.Count(); i++)
                {
                    @Html.HiddenFor(y => y.TypeOfHousing[i].Id)
                    @Html.HiddenFor(y => y.TypeOfHousing[i].Name)
                }

                @Html.DropDownListFor(model => model.TypeOfHousingId, Model
                                                     .TypeOfHousing
                                                     .Select(c => new SelectListItem
                                                     {
                                                         Value = c.Id.ToString(),
                                                         Text = c.Name
                                                     }), htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TypeOfHousingId, "", new { @class = "text-danger" })
            </div>
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            @Html.LabelFor(model => model.AvailableToGuestId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @for (var i = 0; i < Model.AvailableToGuest.Count(); i++)
                {
                    @Html.HiddenFor(y => y.AvailableToGuest[i].Id)
                    @Html.HiddenFor(y => y.AvailableToGuest[i].Name)
                }

                @Html.DropDownListFor(model => model.AvailableToGuestId, Model
                                                     .AvailableToGuest
                                                     .Select(c => new SelectListItem
                                                     {
                                                         Value = c.Id.ToString(),
                                                         Text = c.Name
                                                     }), htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.AvailableToGuestId, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.MaxNumberOfGuests, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.MaxNumberOfGuests, new { htmlAttributes = new { @min = 1, @max = 16, @Value = 2, @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MaxNumberOfGuests, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CityAndCountry, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.CityAndCountry, new { htmlAttributes = new {@id = "autocomplete", @class = "form-control"} })
                @*<input type="text" name="location" id="autocomplete" />*@
            @Html.ValidationMessageFor(model => model.CityAndCountry, "", new { @class = "text-danger" })
            </div>
            
            @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                 @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control" }})
                 @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
            </div>
            
            @Html.LabelFor(model => model.StreetNumber, htmlAttributes: new { @class = "control-label col-md-2"})
            <div class="col-md-2">
                @Html.EditorFor(model => model.StreetNumber, new { htmlAttributes = new { @class = "form-control"}})
                @Html.ValidationMessageFor(model => model.StreetNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FletNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.FletNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FletNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, htmlAttributes: new { @class = "form-control description-form" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" }})
            </div>
            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger"})
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SelectedApartmentComfortsId, htmlAttributes: new { @class = "control-label col-md-2"})
            <div class="col-md-10">
                @for (var i = 0; i < Model.ApartmentComforts.Count(); i++)
                {
                    @Html.HiddenFor(y => y.ApartmentComforts[i].Id)
                    @Html.HiddenFor(y => y.ApartmentComforts[i].Name)
                }

                @Html.ListBoxFor(model => model.SelectedApartmentComfortsId, Model.ApartmentComforts
                                                  .Select(c => new SelectListItem  {
                                                  Value = c.Id.ToString(),
                                                  Text = c.Name
                                                  }),   new { @class = "chosen-select" })
            </div>
           @Html.ValidationMessageFor(model => model.SelectedApartmentComfortsId, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.images, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.images, htmlAttributes: new { type = "file", @class = "form-control", @id = "addImg" })
                @Html.ValidationMessageFor(model => model.images, "", new { @class = "text-danger" })
            </div>
        </div>

        <div id="gallery">
            <div id="grid" class="grid">

            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Add apartment" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section styles {
    <link href="~/Content/bootstrap-chosen.css" rel="stylesheet" />
    <link href="~/Content/Apartment.css" rel="stylesheet" />
}

@section scripts { 
    <script src="~/Scripts/chosen.jquery.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC8dzgWENOUqafU6Dwy_2elCY_UvrFT1Ig&sensor=false&libraries=places&language=en"></script>
    <script>
        $('.chosen-select').chosen();
        $('chosen-select-deselect').chosen({ allow_single_deselect: true });

        $("#createApartmentForm").keypress(function (e) {
            keycode = e.keyCode || e.charCode || e.which //for cross browser
            if (keycode == 13)    //keyCode for enter key
            {
                return false;
            }
        });

        var input = document.getElementById('autocomplete');
        var autocomplete = new google.maps.places.Autocomplete(input, { types: ['(cities)'] });
        google.maps.event.addListener(autocomplete, 'place_changed', function () {
            var place = autocomplete.getPlace();
            console.log(place);
        })

        function readURL(input) {

            if (input.files && input.files[0]) {
                var reader = new FileReader();
                
                reader.onload = function (e) {
                    var img = document.createElement("img");
                    var input = document.createElement("textarea");
                    var div = document.createElement('div');
                    var button = document.createElement('div');
                    var a = document.createElement('a');

                    button.style.textAlign = 'center';
                    button.style.backgroundColor = 'black';

                    a.innerText = "DELETE";
                    a.addEventListener('click', function () {
                        console.log('click');
                        console.log(this.parentNode);
                        console.log(this.parentNode.parentNode);
                        this.parentNode.parentNode.parentNode.removeChild(this.parentNode.parentNode);

                    });

                    button.appendChild(a);

                    div.classList.add('cell');

                    img.classList.add('responsive-image');
                    img.src = e.target.result;
                    div.appendChild(img);
                    div.appendChild(button);

                    input.name = "images";
                    input.style = "display: none";
                    input.textContent = e.target.result;
                    div.appendChild(input);
                    grid.appendChild(div);
                }
                
                reader.readAsDataURL(input.files[0]);
            }
        }

        var form = document.getElementById("gallery");
        var typeOfHousing = document.getElementById("TypeOfHousingId");
        var fletNumberlabel = document.getElementById("fletNumberlabel");
        var fletNumber = document.getElementById("fletNumber");
        var grid = document.getElementById('grid');

        document.getElementById("addImg").addEventListener('change', function () {
            readURL(this);
            this.value = '';
        });


    </script>
}

